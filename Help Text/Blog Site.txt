To create a simple blog site with your existing code structure, we'll extend the project to include a `Blog` entity, repository, service, and controller. The blog posts will be accessible to all users (public), but only authenticated users can create new posts. Here's the complete code:

---

### Updated Project Structure
```
spring-security-thymeleaf
│── src
│   ├── main
│   │   ├── java/com/example/security
│   │   │   ├── config
│   │   │   │   ├── SecurityConfig.java
│   │   │   ├── controller
│   │   │   │   ├── AuthController.java
│   │   │   │   ├── DashboardController.java
│   │   │   │   ├── BlogController.java
│   │   │   ├── entity
│   │   │   │   ├── Role.java
│   │   │   │   ├── User.java
│   │   │   │   ├── Blog.java
│   │   │   ├── repository
│   │   │   │   ├── RoleRepository.java
│   │   │   │   ├── UserRepository.java
│   │   │   │   ├── BlogRepository.java
│   │   │   ├── service
│   │   │   │   ├── UserService.java
│   │   │   │   ├── UserDetailsServiceImpl.java
│   │   │   │   ├── BlogService.java
│   │   │   ├── SecurityApplication.java
│   ├── resources
│   │   ├── templates
│   │   │   ├── home.html
│   │   │   ├── login.html
│   │   │   ├── register.html
│   │   │   ├── dashboard.html
│   │   │   ├── blog.html
│   │   │   ├── create-blog.html
│   │   ├── application.properties
│── pom.xml
```

---

### Entity Classes (`Blog.java`)
```java
package com.example.security.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Blog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String content;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    private LocalDateTime createdAt;
}
```

---

### Repository Layer (`BlogRepository.java`)
```java
package com.example.security.repository;

import com.example.security.entity.Blog;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface BlogRepository extends JpaRepository<Blog, Long> {
    List<Blog> findAllByOrderByCreatedAtDesc();
}
```

---

### Service Layer (`BlogService.java`)
```java
package com.example.security.service;

import com.example.security.entity.Blog;
import com.example.security.entity.User;
import com.example.security.repository.BlogRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class BlogService {
    private final BlogRepository blogRepository;

    public List<Blog> getAllBlogs() {
        return blogRepository.findAllByOrderByCreatedAtDesc();
    }

    public Blog createBlog(Blog blog, User user) {
        blog.setUser(user);
        blog.setCreatedAt(LocalDateTime.now());
        return blogRepository.save(blog);
    }
}
```

---

### Controller Layer (`BlogController.java`)
```java
package com.example.security.controller;

import com.example.security.entity.Blog;
import com.example.security.entity.User;
import com.example.security.service.BlogService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
@RequiredArgsConstructor
public class BlogController {
    private final BlogService blogService;

    @GetMapping("/blog")
    public String blogPage(Model model) {
        model.addAttribute("blogs", blogService.getAllBlogs());
        return "blog";
    }

    @GetMapping("/blog/create")
    public String createBlogPage(Model model) {
        model.addAttribute("blog", new Blog());
        return "create-blog";
    }

    @PostMapping("/blog/create")
    public String createBlog(@ModelAttribute Blog blog, @AuthenticationPrincipal User user) {
        blogService.createBlog(blog, user);
        return "redirect:/blog";
    }
}
```

---

### Updated Security Configuration (`SecurityConfig.java`)
```java
package com.example.security.config;

import com.example.security.service.UserDetailsServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {
    private final UserDetailsServiceImpl userDetailsService;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/dashboard", "/blog/create").authenticated()
                .anyRequest().permitAll()
            )
            .formLogin(form -> form.loginPage("/login").defaultSuccessUrl("/dashboard", true))
            .logout(logout -> logout.logoutSuccessUrl("/"));

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

---

### Thymeleaf Templates

#### `blog.html` (Public Page)
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Blog</title>
</head>
<body>
    <h1>Blog Posts</h1>
    <div th:each="blog : ${blogs}">
        <h2 th:text="${blog.title}"></h2>
        <p th:text="${blog.content}"></p>
        <small>Posted by <span th:text="${blog.user.username}"></span> on <span th:text="${blog.createdAt}"></span></small>
        <hr>
    </div>
    <a th:href="@{/blog/create}" sec:authorize="isAuthenticated()">Create New Post</a>
</body>
</html>
```

#### `create-blog.html` (Protected Page)
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Create Blog</title>
</head>
<body>
    <h1>Create a New Blog Post</h1>
    <form th:action="@{/blog/create}" th:object="${blog}" method="post">
        <label>Title: <input type="text" th:field="*{title}" required/></label> <br>
        <label>Content: <textarea th:field="*{content}" required></textarea></label> <br>
        <button type="submit">Create</button>
    </form>
</body>
</html>
```

---

### Updated `home.html`
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Home</title>
</head>
<body>
    <h1>Welcome to the Home Page</h1>
    <a href="/login">Login</a> | <a href="/register">Register</a> | <a href="/blog">View Blog</a>
</body>
</html>
```

---

### Updated `dashboard.html`
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Dashboard</title>
</head>
<body>
    <h2>Welcome, <span th:text="${username}"></span></h2>
    <a href="/blog/create">Create Blog Post</a> | <a href="/logout">Logout</a>
</body>
</html>
```

---

### Updated `application.properties`
```properties
# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/security_db
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
```

---

### Summary
- The blog page (`/blog`) is public and displays all blog posts.
- Only authenticated users can create new blog posts (`/blog/create`).
- The `Blog` entity is linked to the `User` entity to track who created the post.
- Thymeleaf templates are used for the frontend, with `sec:authorize` for conditional rendering based on authentication.

This setup maintains your existing authentication and authorization structure while adding a simple blog feature.